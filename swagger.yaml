swagger: "2.0"
################################################################################
#                              API Information                                 #
################################################################################
info:
  description: "is a fullstack javascript application that enables citizens give their mandate to politicians running for different government offices
              while building trust in the process through transparency"
  version: "1.0.0"
  title: "Politico-App"
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pascalulor@yahoo.com"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "the-politico.herokuapp.com"
basePath: "/api/v1"
tags:
- name: "parties"
  description: "Everything about the party API"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "offices"
  description: "Access to offices"
- name: "candidate"
  description: "Operations about candidate"
- name: "votes"
  description: "Operations about votes"
- name: "admin"
  description: "Operations about admin"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
# schemes:
# - "https"
# - "http"
################################################################################
#                                           Paths                              #
################################################################################
paths:
  /parties:
    post:
      tags:
      - "parties"
      summary: "Add a new party to the platform"
      description: "create a new party on the platform"
      operationId: "addParty"
      consumes:
      - "application/json"
      - application/x-www-form-urlencoded
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "new party to be added to the platform"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        201:
          description: party created successfully
          examples:
            application/json:
              error: false
              message:
              parties:
                id: 2
                name: DORO MEGA PARTY
                userid: 1
                hqaddress: 32 epic road
                about: wsfsvfffefefewee fefefe
                email: trump@gmail.com
                phonenumber: 8169568499
                logourl: uhhk.jpg
                createdat: 2019-02-07T09:54:29.195Z
                updatedat: 2019-02-07T09:54:29.195Z
        400:
          description: Invalid input
          examples:
            application/json:
              error: true
              message: 
                name: name can only be alphabetical
                hqAddress: Invalid hqAddress
                email: Invalid email
                phonenumber: Invalid phonenumber
                about: about field must be between 20 to 1000 characters
                logoUrl: Invalid logoUrl
        500:
          description: duplicate phonenumber input
          examples:
            application/json:
              error: true
              message: 
                phonenumber: User with phonenumber already exist
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "parties"
      summary: "get all existing parties"
      description: "get all existing parties on the platform"
      operationId: "getAllParties"
      produces:
      - "application/json"
      responses:
        400:
          description: "No party available"
        500:
          description: "Something went wrong"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  
  /parties/{partyId}:
    get:
      tags:
      - "parties"
      summary: "Find party by ID"
      description: "Returns a single party"
      operationId: "getPartyById"
      produces:
      - "application/json"
      parameters:
      - name: "partyId"
        in: "path"
        description: "ID of party to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Party does not exist"
      security:
      - api_key: []
    delete:
      tags:
      - "parties"
      summary: "Deletes a party"
      description: ""
      operationId: "deleteParty"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: true
        type: "string"
      - name: "partyId"
        in: "path"
        description: "Id of party to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Party does not exist"
        500:
          description: "Something went wrong"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /parties/{partyId}/name:
    patch:
      tags:
      - "parties"
      summary: "updates the name of a party"
      description: "updates the name of an existing party"
      operationId: "updatePartyName"
      consumes:
      - "multipart/form-data"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - name: "partyId"
        in: "path"
        description: "ID of party to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "New name of party"
        required: false
        type: "string"
      responses:
        200:
          description: "Party updated successfully"
          schema:
            $ref: "#/definitions/Pet"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
################################################################################
#                                           Offices Paths                              #
################################################################################
  /offices:
    post:
      tags:
      - "offices"
      summary: "Add a new office to the platform"
      description: "create a new office on the platform"
      operationId: "addOffice"
      consumes:
      - "application/json"
      - application/x-www-form-urlencoded
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "new office to be added to the platform"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        201:
          description: office created successfully
          examples:
            application/json:
              error: false
              message:
              parties:
                id: 2
                name: President
                type: Federal
                createdat: 2019-02-07T09:54:29.195Z
                updatedat: 2019-02-07T09:54:29.195Z
        400:
          description: Invalid input
          examples:
            application/json:
              error: true
              message: 
                name: name can only be alphabetical
                type: type must be between 3 to 50 characters
        500:
          description: duplicate phonenumber input
          examples:
            application/json:
              error: true
              message: 
                phonenumber: "Something went wrong"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "offices"
      summary: "get all existing offices"
      description: "get all existing offices on the platform"
      operationId: "getAllOffices"
      produces:
      - "application/json"
      responses:
        400:
          description: "No office available"
        500:
          description: "Something went wrong"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /offices/{officeId}:
    get:
      tags:
      - "offices"
      summary: "Find party by ID"
      description: "Returns a single party"
      operationId: "getOfficeById"
      produces:
      - "application/json"
      parameters:
      - name: "officeId"
        in: "path"
        description: "ID of office to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Office does not exist"
        # 404:
        #   description: "Pet not found"
      security:
      - api_key: []

  /office/{candidateId}/register:
    post:
      tags:
      - "candidate"
      summary: "updates the name of a party"
      description: "updates the name of an existing party"
      operationId: "createCandidate"
      consumes:
      - "multipart/form-data"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - name: "candidateId"
        in: "path"
        description: "ID of candidate to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "office"
        in: "formData"
        description: "New name of party"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Candidate created successfully"
          schema:
            $ref: "#/definitions/Pet"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /office/{officeId}/result:
    get:
      tags:
      - "votes"
      summary: "updates the name of a party"
      description: "updates the name of an existing party"
      operationId: "getResult"
      consumes:
      - "multipart/form-data"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - name: "officeId"
        in: "path"
        description: "ID of office you want results for"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: voted successfully
          examples:
            application/json:
              error: false
              result:
              id: 2
              office: President
              candidate: 2
              electionResult: 3
              createdat: 2019-02-07T09:54:29.195Z
              updatedat: 2019-02-07T09:54:29.195Z
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /votes:
    post:
      tags:
      - "votes"
      summary: "vote a candidate on the platform"
      description: "vote a candidate for an office on the platform"
      operationId: "votes"
      consumes:
      - "application/json"
      - application/x-www-form-urlencoded
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "x-access-token"
        description: "Token Authentication"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "new party to be added to the platform"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        201:
          description: voted successfully
          examples:
            application/json:
              error: false
              votes:
                office: 2
                candidate: 2
                createdat: 2019-02-07T09:54:29.195Z
                updatedat: 2019-02-07T09:54:29.195Z
        400:
          description: Invalid input
          examples:
            application/json:
              error: true
              message: You have already voted for this candidate
        500:
          description: server error
          examples:
            application/json:
              error: true
              message: Something went wrong
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      
  /auth/signup:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: user signup successfully
          examples:
            application/json:
              success: true
              statusCode: 201
              message: Signup successfull
              data: 
                user:
                  userIid: 2,
                  fullName: Pasca Ulor,
                  email: trump@gmail.com,
                  is_admin: false,
                  createdat: 2019-02-07T09:54:29.195Z,
                  updatedat: 2019-02-07T09:54:29.195Z,
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImZ1bGxOYW1lIjoiSm9lIGVlZWUiLCJlbWFpbCI6Im5lcm90eGFyZG1pbkBhbmRlbGEuY29tIiwiaXNfYWRtaW4iOmZhbHNlLCJpYXQiOjE1NTAyMzc2MjYsImV4cCI6MTU1NTQyMTYyNn0.HLHGzvM-j7zwWrOqxLv2-amyBPgYvJpLgIRxi3nMlto
              
        400:
          description: Duplicate email entry
          examples:
            application/json:
              error: true
              message: 
                email: User with email already exist              
  /auth/login:
    post:
      tags:
      - "user"
      summary: "User login"
      description: "This can only be done by a signed up user."
      operationId: "userLogin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: user login successfully
          examples:
            application/json:
              success: true
              statusCode: 200
              message: Signup successfull
              data: 
                user:
                  userIid: 2,
                  fullName: Pasca Ulor,
                  email: trump@gmail.com,
                  is_admin: false,
                  createdat: 2019-02-07T09:54:29.195Z,
                  updatedat: 2019-02-07T09:54:29.195Z,
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImZ1bGxOYW1lIjoiSm9lIGVlZWUiLCJlbWFpbCI6Im5lcm90eGFyZG1pbkBhbmRlbGEuY29tIiwiaXNfYWRtaW4iOmZhbHNlLCJpYXQiOjE1NTAyMzc2MjYsImV4cCI6MTU1NTQyMTYyNn0.HLHGzvM-j7zwWrOqxLv2-amyBPgYvJpLgIRxi3nMlto
              
        400:
          description: Duplicate email entry
          examples:
            application/json:
              error: true
              message: 
                email: Invalid email or password            

  /admin/{userId}/true:
    post:
      tags:
      - "admin"
      summary: "User Role"
      description: "This can only be done by a signed up user."
      operationId: "adminRole"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of office you want results for"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: user successfully made an admin
          examples:
            application/json:
              success: true
              statusCode: 200
              data:
                user:
                  userIid: 2,
                  fullName: Pasca Ulor,
                  email: trump@gmail.com,
                  is_admin: true,
                  createdat: 2019-02-07T09:54:29.195Z,
                  updatedat: 2019-02-07T09:54:29.195Z,
        400:
          description: User does not exist
          examples:
            application/json:
              error: true
              message: User does not exist

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      # id:
      #   type: "integer"
      #   format: "int64"
      othername:
        type: "string"
        example: Flash
      firstName:
        type: "string"
        example: Barry
      lastName:
        type: "string"
        example: Allen
      email:
        type: "string"
        example: barry@yahoo.com
      password:
        type: "string"
        example: adc568@@@@0
      phonenumber:
        type: "string"
        example: 8069568934
      passportUrl:
        type: "string"
        example: flash.jpg
        # format: "int32"
        description: "User image"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "logoUrl"
    - "hqAddress"
    - "email"
    - "phonenumber"
    properties:
      id:
        type: "integer"
        format: "int64"
      # category:
      #   $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "PPC"
      logoUrl:
        type: "string"
        example: "PPC.jpg"
      hqAddress:
        type: "string"
        example: "32 epic road"
      email:
        type: "string"
        example: "ppc@yahoo.com"
      phonenumber:
        type: "string"
        example: "8069568494"
      about:
        type: "string"
        example: "PPC is a demo party created for test purpose alone"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"